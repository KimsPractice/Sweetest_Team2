extends layout
block content
	div#wrap
		div#main
			div#userCard
				Img(id='userCardImg')

			div#userOpenCard
				Img(id='userOpenCardImg' src="")
				Img(id="userCloseCardImg")
				
			div#bell
				button(id="big_bell")  

			div#myOpenCard
				Img(id='myOpenCardImg' src="")
				Img(id="myCloseCardImg")
				
			div#myCard
				Img(id='myCardImg')
				button(id="cardOpenBtn") 카드 오픈
		span(id="nickname")
				
			
		div#tmpDiv(style="position:absolute;top:500px;")
			button(id="tmp") (임시)입장


			
	script(src='https://cdn.socket.io/socket.io-1.4.5.js')
	script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js')
	script.
		var socket = io();
		var turn = 0;
		var is_match;
		var count;
		var nickName = document.getElementById('nickname')		// 내이름 
		
		// 카드 이름 매칭
		function makeName(card) {
			let card_name = "";
			let name = card.substring(0, 1);
			switch (name){
				case "a" :
					card_name = "apple";
					break;
				case "b" :
					card_name = "banana";
					break;
				case "c" :
					card_name = "peach";
					break;
				case "d" :
					card_name = "strawberry";
					break;
			}
			return card_name;
		}

		//var image = new Image();
		//image.src = 'file:///C:/Users/grutech/Desktop/Sweetest_Team2/Image/apple.png'
		//console.log(image.src);
		//userCloseCard.appendChild(image);


		// 소켓 통신
		socket.on('hihi', (list) => { // 접속한 소켓 확인용
			var socket_list = '';
			console.log("SocketList: " + JSON.stringify(list));
			nickName.innerHTML = name;
			console.log('userName:'+ name);
			for(var socket in list){
				socket_list += '<li id='+socket+'>소켓ID: '+socket+'</li>';
			}
			$('#param1').html(socket_list);
		})

		// 나가면 소켓 확인용 리스트에서 지움
		.on('clear', (id) => {
			$('#param1 li#'+id).remove();
		})

		// 서버에서 보내는 정보 메시지 받음
		.on('info', (msg) => {
			console.log(msg);
		})

		// 카드 배분. 받은걸로 액션 처리.
		.on('gift_card', (card, idx, match) => {
			is_match = match; // 다음 단계를 위해서 저장
			count = idx; // 다음 단계를 위해서 저장

			var folder_name = makeName(card);
			var card_name = folder_name + card.substring(1, 2);
			
			// 카운트를 유저 턴으로 바꿔줘야함. 예시로 순차처리. 턴값은 서버에서 종친거 처리하고 넘겨드림
			(count % 2 == 1) ? 
				$("#myOpenCardImg")[0].src = "/Image/" + folder_name + "/" + card_name + ".png"
				: $("#userOpenCardImg")[0].src = "/Image/" + folder_name + "/" + card_name + ".png";
			
			console.log('서버로부터 카드 받음(idx:'+idx+')', card_name, ' / match: ', match);
			console.log('카드 5 ? : ' + match);

			if (idx == 55){
				console.log("카드 다 썼음. 엔딩처리하면 됨");
			}
		});


		$('#tmp').click(() => { // 방 입장용(게임시작용)
			console.log('click go');
			var client_message = {
				mode : "user_init",
				userName : name,
			}

			socket.emit('go'); 
			socket.emit('client_message', client_message);
		
		});

		$('#cardOpenBtn').click(() => { 
			// 카드 요청.
			
			socket.emit('show_me_the_card');
		});

		$('#big_bell').click(() => {
			if(is_match) {
				console.log("종 잘 쳤음"); 
				// 쓴 카드 회수하는 것은 승패에 영향이 없지만 추가해야할까... 
				// 한 번이라도 종을 친 적이 있다면 0 됐을 때 카드 뒷면 이미지 보여지게 처리하면 됨. 없으면 맨마닥.
				
				let msg = socket.id + "가 종을 잘 쳤음. 짝짝짝. 뷰에서 액션 처리할 수 있게 회신 바람";
				socket.emit('client_message', msg);
			} else { 
				console.log(socket.id + " 잘못쳤음. -1해야함 ");
				let msg = socket.id + "가 종을 잘못쳤으니까 차감 후 회신 바람";
				socket.emit('client_message', msg);
			}
		});


		//	h1= title
		//	br
		//	br
		//	span 프로토타입 패키지. &nbsp;&nbsp;
		//		a(href="/") 메인으로
		//	hr
		//	br
		//	h2 * 파라미터 테스트
		//	br
		//	span 접속자
		//	div#param1
		//	br
		//	hr
		//	div#btn_zone1
		//		button#go 게임접속
		//		span 이 버튼은 방에 입장하는 테스트 버튼
		//	br
		//	div#btn_zone2
		//		button#game_start 카드가져오기
		//			span 이 버튼은 카드 가져오기 테스트 버튼. 방에 두 명 입장하고나서 누를 수 있게.
		//	br
		//	div#btn_zone3
		//		button#big_bell 종치기
		//		span 이 버튼은 종치기 테스트 버튼. 턴 당 한 번 치게 제한해야 함.
		//		div#bell_result	



